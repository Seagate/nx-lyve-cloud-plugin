# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "fix-windows" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-20.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            vcpkgCommitId: '4065f37d0a6628ef17cf6ee15385f9091f1075bc'
  
    steps:
    - uses: actions/checkout@v4

    - name: Build using CMake on Linux
      if: ${{ ! matrix.os == 'windows-latest' }}
      run: >
        ./build_samples.sh
        --no-tests
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      if: ${{ matrix.os == 'windows-latest' }}
      id: runvcpkg
      with:
        # The vcpkg.json file, which will be part of cache key computation.
        vcpkgJsonGlob: '**/samples/cloudfuse_plugin/vcpkg.json'

    - name: Build using CMake on Windows
      shell: powershell
      if: ${{ matrix.os == 'windows-latest' }}
      run: >
        ./build_samples.bat
        --no-tests
        --debug
